// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mobius.proto

package mobius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InferRequest struct {
	X                    []float32 `protobuf:"fixed32,1,rep,packed,name=x" json:"x,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InferRequest) Reset()         { *m = InferRequest{} }
func (m *InferRequest) String() string { return proto.CompactTextString(m) }
func (*InferRequest) ProtoMessage()    {}
func (*InferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mobius_49b73b6599d79e00, []int{0}
}
func (m *InferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InferRequest.Unmarshal(m, b)
}
func (m *InferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InferRequest.Marshal(b, m, deterministic)
}
func (dst *InferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferRequest.Merge(dst, src)
}
func (m *InferRequest) XXX_Size() int {
	return xxx_messageInfo_InferRequest.Size(m)
}
func (m *InferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InferRequest proto.InternalMessageInfo

func (m *InferRequest) GetX() []float32 {
	if m != nil {
		return m.X
	}
	return nil
}

type InferResponse struct {
	Y                    []float32 `protobuf:"fixed32,1,rep,packed,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InferResponse) Reset()         { *m = InferResponse{} }
func (m *InferResponse) String() string { return proto.CompactTextString(m) }
func (*InferResponse) ProtoMessage()    {}
func (*InferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mobius_49b73b6599d79e00, []int{1}
}
func (m *InferResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InferResponse.Unmarshal(m, b)
}
func (m *InferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InferResponse.Marshal(b, m, deterministic)
}
func (dst *InferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferResponse.Merge(dst, src)
}
func (m *InferResponse) XXX_Size() int {
	return xxx_messageInfo_InferResponse.Size(m)
}
func (m *InferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InferResponse proto.InternalMessageInfo

func (m *InferResponse) GetY() []float32 {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*InferRequest)(nil), "InferRequest")
	proto.RegisterType((*InferResponse)(nil), "InferResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MobiusClient is the client API for Mobius service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MobiusClient interface {
	Infer(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*InferResponse, error)
	InferStream(ctx context.Context, opts ...grpc.CallOption) (Mobius_InferStreamClient, error)
}

type mobiusClient struct {
	cc *grpc.ClientConn
}

func NewMobiusClient(cc *grpc.ClientConn) MobiusClient {
	return &mobiusClient{cc}
}

func (c *mobiusClient) Infer(ctx context.Context, in *InferRequest, opts ...grpc.CallOption) (*InferResponse, error) {
	out := new(InferResponse)
	err := c.cc.Invoke(ctx, "/Mobius/Infer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobiusClient) InferStream(ctx context.Context, opts ...grpc.CallOption) (Mobius_InferStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mobius_serviceDesc.Streams[0], "/Mobius/InferStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mobiusInferStreamClient{stream}
	return x, nil
}

type Mobius_InferStreamClient interface {
	Send(*InferRequest) error
	Recv() (*InferResponse, error)
	grpc.ClientStream
}

type mobiusInferStreamClient struct {
	grpc.ClientStream
}

func (x *mobiusInferStreamClient) Send(m *InferRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mobiusInferStreamClient) Recv() (*InferResponse, error) {
	m := new(InferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MobiusServer is the server API for Mobius service.
type MobiusServer interface {
	Infer(context.Context, *InferRequest) (*InferResponse, error)
	InferStream(Mobius_InferStreamServer) error
}

func RegisterMobiusServer(s *grpc.Server, srv MobiusServer) {
	s.RegisterService(&_Mobius_serviceDesc, srv)
}

func _Mobius_Infer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobiusServer).Infer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mobius/Infer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobiusServer).Infer(ctx, req.(*InferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mobius_InferStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MobiusServer).InferStream(&mobiusInferStreamServer{stream})
}

type Mobius_InferStreamServer interface {
	Send(*InferResponse) error
	Recv() (*InferRequest, error)
	grpc.ServerStream
}

type mobiusInferStreamServer struct {
	grpc.ServerStream
}

func (x *mobiusInferStreamServer) Send(m *InferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mobiusInferStreamServer) Recv() (*InferRequest, error) {
	m := new(InferRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Mobius_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mobius",
	HandlerType: (*MobiusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Infer",
			Handler:    _Mobius_Infer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InferStream",
			Handler:       _Mobius_InferStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mobius.proto",
}

func init() { proto.RegisterFile("mobius.proto", fileDescriptor_mobius_49b73b6599d79e00) }

var fileDescriptor_mobius_49b73b6599d79e00 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcd, 0x4f, 0xca,
	0x2c, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49,
	0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x83,
	0xca, 0x2a, 0xc9, 0x70, 0xf1, 0x78, 0xe6, 0xa5, 0xa5, 0x16, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x08, 0xf1, 0x70, 0x31, 0x56, 0x48, 0x30, 0x2a, 0x30, 0x6b, 0x30, 0x05, 0x31, 0x56, 0x28,
	0xc9, 0x72, 0xf1, 0x42, 0x65, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x41, 0xd2, 0x95, 0x30, 0xe9,
	0x4a, 0xa3, 0x2a, 0x2e, 0x36, 0x5f, 0xb0, 0x55, 0x42, 0x36, 0x5c, 0xac, 0x60, 0x85, 0x42, 0xbc,
	0x7a, 0xc8, 0xc6, 0x49, 0xf1, 0xe9, 0xa1, 0xe8, 0x57, 0x12, 0x69, 0xba, 0xfc, 0x64, 0x32, 0x13,
	0x9f, 0x12, 0xa7, 0x7e, 0x99, 0xa1, 0x7e, 0x26, 0x48, 0xca, 0x8a, 0x51, 0x4b, 0xc8, 0x88, 0x8b,
	0x1b, 0xac, 0x2c, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x97, 0x90, 0x19, 0x0c, 0x1a, 0x8c, 0x06, 0x8c,
	0x49, 0x6c, 0x60, 0xf7, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xea, 0x81, 0xbe, 0xd3, 0xed,
	0x00, 0x00, 0x00,
}
